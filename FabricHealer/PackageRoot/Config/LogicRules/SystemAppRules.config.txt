## Logic rules for Service Fabric System Service repairs.

## Mitigate Named Arguments - Corresponding data is supplied by FabricObserver, Renamed for brevity by FH.
## | Argument Name             | Definition                                                                                   |
## |---------------------------|----------------------------------------------------------------------------------------------|
## | AppName                   | Name of the SF application, format is fabric:/SomeApp                                        |
## | ServiceName               | Name of the SF service, format is fabric:/SomeApp/SomeService                                |
## | NodeName                  | Name of the node                                                                             | 
## | NodeType                  | Type of node                                                                                 |  
## | PartitionId               | Id of the partition                                                                          |
## | ReplicaOrInstanceId       | Id of the replica or instance                                                                |
## | FOErrorCode               | Error Code emitted by FO (e.g. "FO002")                                                      | 
## | MetricName                | Name of the resource supplied by FO (e.g., CpuPercent or MemoryMB, etc.)                     |   
## | MetricValue               | Corresponding Metric Value supplied by FO (e.g. "85" indicating 85% CPU usage)               | 
## | SystemServiceProcessName  | The name of a Fabric system service process supplied in FO health data                       | 
## | OS                        | The name of the OS from which the FO data was collected (Linux or Windows)                   |

        
## Application-related Metric Names.
## | Name                      |                                                                                    
## |---------------------------|
## | ActiveTcpPorts            |                                         
## | CpuPercent                |    
## | EphemeralPorts            |     
## | MemoryMB                  | 
## | MemoryPercent             | 
## | FileHandles               | 
## | FileHandlesPercent        | 
## | Threads                   | 

## First, check if we are inside the run interval. If inside run interval, then cut (no other rules will be processed).
## Note: FO only generates Application (System) level warnings for system services. There will only ever be ApplicationName as "fabric:/System" in the FO health data that FH emits, so this is an optional argument.
## This is commented out by default. Just uncomment and set the global run interval for System app level repairs to suit your needs.

## Mitigate() :- CheckInsideRunInterval(RunInterval=00:10:00), !.


## TimeScopedRestartFabricNode is an internal predicate to check for the number of times a system service node restart repair has run to completion within a supplied time window. 
## If Completed Repair count is less then supplied value, then run RestartFabricNode mitigation.

TimeScopedRestartFabricNode(?count, ?time) :- GetRepairHistory(?repairCount, TimeWindow=?time), ?repairCount < ?count, 
	RestartFabricNode(MaxPostRepairHealthCheckTime=00:45:00).


## TimeScopedRestartFabricSystemProcess is an internal predicate to check for the number of times a System service process restart repair has run to completion within a supplied time window. 
## If Completed Repair count is less then supplied value, then run RestartFabricSystemProcess mitigation.

TimeScopedRestartFabricSystemProcess(?count, ?time) :- GetRepairHistory(?repairCount, TimeWindow=?time), ?repairCount < ?count, 
	RestartFabricSystemProcess(MaxPostRepairHealthCheckTime=00:00:30).
	

## Mitigation rules for multiple metrics and targets. NOTE: Do not restart Fabric or FabricHost processes unless you want to take the node down. For the latter (restart node),
## use TimeScopedRestartFabricNode (or RestartFabricNode predicate directly), which employs a safe Fabric node restart workflow (with deactivation step), not just a process kill.


## CPU Time - Percent

Mitigate(MetricName="CpuPercent", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).


## Memory Use - Megabytes in use

Mitigate(MetricName="MemoryMB", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).


## Memory Use - Percent in use

Mitigate(MetricName="MemoryPercent", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).


## Ephemeral Ports in Use

Mitigate(MetricName="EphemeralPorts", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).


## Threads

Mitigate(MetricName="Threads", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).

## Open File Handles - Specific system service process on either Windows or Linux.
## Note the use of the StringContains GuanFunc here, as Windows and Linux have different process names for some components,
## that is, different file extensions (.dll, .exe or none, for Linux, for example, and *always* none for Windows (because FO emits just the name, not including the extension, for Windows procs)).
## Restart the offending Fabric system process named FabricGateway, regardless of OS.

Mitigate(MetricName="FileHandles", SystemServiceProcessName=?SysProcName) :- StringContains("FabricGateway", ?SysProcName),
	TimeScopedRestartFabricSystemProcess(15, 01:00:00).


## Open File Handles - Linux-only: Any SF system service besides Fabric or FabricHost.
## Restart the offending Fabric system process.

Mitigate(MetricName="FileHandles", OS="Linux", SystemServiceProcessName=?SysProcName) :- not(?SysProcName == "Fabric" || ?SysProcName == "FabricHost"), 
	TimeScopedRestartFabricSystemProcess(5, 01:00:00).


## Open File Handles - Linux, Fabric or FabricHost. In these cases, we want a safe (graceful) restart of the Fabric node; not just kill the process, which will restart the node, but not gracefully.
## Restart the Fabric node where the offending instance is running.

Mitigate(MetricName="FileHandles", OS="Linux", SystemServiceProcessName="Fabric") :- TimeScopedRestartFabricNode(2, 08:00:00).
Mitigate(MetricName="FileHandles", OS="Linux", SystemServiceProcessName="FabricHost") :- TimeScopedRestartFabricNode(2, 08:00:00).