
## FabricHealer provides the facts used here by querying HM directly, versus supplying facts from serialized
## TelemetryData instances generated by FabricObserver or FHProxy. 

## The logic program below is a repair specification (policy) for Asgard/WARP clusters.

## Don't proceed if the target entity is not in Error.
Mitigate(HealthState=?healthState) :- not(?healthState == Error), !.

## Don't proceed if the target node hasn't been in Error (including cyclic Up/Down) state for at least two hours.
Mitigate() :- CheckInsideHealthStateMinDuration(02:00:00), !.

## Don't proceed if there are 2 machine repairs currently active in the cluster.
Mitigate() :- CheckOutstandingRepairs(2), !.

## Don't proceed if target node is currently inside a post-repair health probation period (post-repair means a Completed repair; target node is still recovering).
Mitigate() :- CheckInsideNodeProbationPeriod(00:30:00), !.

## Don't schedule a machine repair if one was scheduled less than 10 minutes ago.
Mitigate() :- CheckInsideScheduleInterval(00:10:00), !.

## Mitigations (RM repair scheduling logic - InfrastructureService for the target node type will be the repair Executor, not FH).
## The logic below demonstrates how to specify a repair escalation path: Reboot -> Reimage -> Heal -> Triage (human intervention (TODO)).

## Reboot. Note that employing the internal predicate TimeScopedScheduleRepair will not work given the placement of the cut operator in the rules below.
## Don't process any other rules if scheduling succeeds OR fails (note the position of ! (cut operator)) and there are less than 2 of these repairs that have completed in the last 4 hours.
Mitigate() :- GetRepairHistory(?repairCount, 04:00:00, System.Reboot), ?repairCount < 2, !, ScheduleMachineRepair(System.Reboot).

## Reimage.
Mitigate() :- GetRepairHistory(?repairCount, 04:00:00, System.ReimageOS), ?repairCount < 2, !, ScheduleMachineRepair(System.ReimageOS).

## Heal.
Mitigate() :- GetRepairHistory(?repairCount, 04:00:00, System.Azure.Heal), ?repairCount < 2, !, ScheduleMachineRepair(System.Azure.Heal).

## If we end up here, then human intervention is required (Triage). LogWarning will generate an ETW event (FabricHealerDataEvent) containing the level and message.
Mitigate(NodeName=?nodeName) :- LogWarning("Specified Machine repair escalations have been exhausted for node {0}. Human intervention is required.", ?nodeName).