## Logic rules for Service Fabric Application-level repairs.

## RunInterval rule: Are we inside the run interval for an app repair? This is optional. It's up to you if you want to employ this type of constraint.
## This rule means that if any of the repairs for any of the apps in this rule file has run within the past 5 minutes, cut (!), which is a special operator that means, effectively, stop processing rules (do not backtrack).
## By having this as a top level rule, it means no subsequent rules in this file will run if we are inside the run interval.
Mitigate() :- CheckInsideRunInterval(RunInterval=00:05:00), !.

## Mitigation queries for multiple metrics and targets.

## CPU - Percent In Use.
Mitigate(AppName="fabric:/CpuStress", MetricName="CpuPercent", MetricValue=?MetricValue) :- ?MetricValue >= 20, 
    TimeScopedRestartCodePackage(4, 01:00:00).

## File Handles - Total allocated for Any SF Service Process belonging to the specified SF Application.
## This is example of how to use the Guan system predicate, Contains. It takes two string args, the first is the substring to look for in the second arg. So, arg1 is the needle and arg 2 is the haystack.
## In practice, for this scenario, you would just pass the target app name string into Mitigate, Mitigate(AppName="fabric:/ClusterObserver", ...), for example. Contains here is just an example of how to use it..
Mitigate(AppName=?AppName, MetricName="FileHandles", MetricValue=?MetricValue) :- Contains("ClusterObserver", ?AppName), ?MetricValue >= 450, 
	TimeScopedRestartCodePackage(4, 08:00:00).

## Memory - Percent In Use for Any SF Service Process belonging to the specified SF Application.
Mitigate(AppName="fabric:/CpuStress", MetricName="MemoryPercent", MetricValue=?MetricValue) :- ?MetricValue >= 30, 
	TimeScopedRestartCodePackage(5, 05:00:00).

## Memory - Megabytes In Use for Any SF Service Process belonging to the specified SF Applications.
Mitigate(AppName="fabric:/CpuStress", MetricName="MemoryMB") :- TimeScopedRestartCodePackage(5, 05:00:00).
Mitigate(AppName="fabric:/ContainerFoo2", MetricName="MemoryMB") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Active TCP Ports - Any app service.
Mitigate(MetricName="ActiveTcpPorts") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Ephemeral TCP Ports - Any app service.
Mitigate(MetricName="EphemeralPorts") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Ephemeral Ports - Specific Application - any of its services.
Mitigate(AppName="fabric:/MyApp42", MetricName="EphemeralPorts", MetricValue=?MetricValue) :- ?MetricValue >= 250, 
	TimeScopedRestartCodePackage(5, 05:00:00).


## TimeScopedRestartCodePackage is an internal predicate to check for the number of times a repair has run to completion within a supplied time window. 
## If Completed Repair count is less then supplied value, then run RestartCodePackage mitigation.
TimeScopedRestartCodePackage(?count, ?time) :- GetRepairHistory(?repairCount, TimeWindow=?time), ?repairCount < ?count, 
	RestartCodePackage().